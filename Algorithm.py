# 모두 목적은 같은데 방법이 조금씩 다릅니다. 같은 문제를 해결하기 위해서도 다양한 알고리즘이 존재하는 거죠.
# 좋은 알고리즘이란? 1. 문제를 해결하는 것. # 문제를 더 잘 해결하는 것.
# 컴퓨터 알고리즘이란? 컴퓨터 알고리즘이란, 컴퓨터가 어떤 문제를 해결하기 위해서 컴퓨터가 이해할 수 있는 방식으로 정리되어 있는 해결 방법입니다.
# 네비게이션 어플, 영화 어플
# 알고리즘의 중요성
# 예전에는 서비스를 만드는 것 자체만으로도 의미가 있었는데, 이제는 소프트웨어 개발에 대한 진입 장벽이 많이 낮아졌기 때문에 무언가 차별성이 필요합니다. 기술적으로 얼마나 잘 구현되었는지, 즉 알고리즘이 얼마나 좋은지에 따라 서비스의 성패가 갈리는 경우도 많습니다.

# 개발자가 되면 이런 식의 대화가 오갑니다:
# "여기서는 BFS 알고리즘을 써줘."
# "여기는 O(n)으로 작성해야 할 것 같은데?"
# "Divide and Conquer 방식으로 접근해보자."

# 알고리즘은 개발자의 실력
# 소통의 문제를 떠나서, 알고리즘은 결과물에서도 차이를 만들어 냅니다.
# 제가 웹 개발을 처음 했을 때, 알고리즘의 중요성을 뼈저리게 느낀 적이 있습니다. 분명 사용자 수는 천천히 늘어나는데, 사이트가 심각할 정도로 느려진 거죠. 아무리 봐도 뭐가 문제인지 모르겠는데, 알고리즘을 공부한 친구가 보더니 금방 해결됐습니다. 효율성에 대해서 조금만 신경 써도 쉽게 해결할 수 있는 부분이었습니다.
# 어렵고 복잡한 문제를 푸는 사람에게나 알고리즘 공부가 필요한 줄 알았는데, 모든 프로그램에 알고리즘이 포함되어 있다는 걸 몸소 알게 되었고, 그래서 알고리즘 공부를 하면 평소 개발할 때에도 확실히 더 좋은 코드를 작성할 수 있다는 확신이 생겼습니다.
# 여러분도 개발자로서 계속 레벨업을 하고 싶으시다면 알고리즘 공부는 필수적으로 해야 할 것입니다.
#
# 회사 가려면 알고리즘 잘해야 한다.
# Google, Facebook, Amazon 등 대기업들을 포함한 대부분의 회사에서는 개발자를 뽑을 때 알고리즘 테스트를 진행합니다. 그중에서 대기업들은 특히 알고리즘을 거의 가장 중요한 평가 기준으로 봅니다.
# 실무적인 경험이 부족하더라도 알고리즘적 사고력이 검증된 지원자라면, 나머지는 충분히 가르칠 수 있다고 판단을 하는 거죠. 반대로 알고리즘을 잘 모르는 개발자라면 좋은 대우를 받기 어렵다는 뜻입니다.
# 취업이라는 현실적인 상황을 고려해도 알고리즘 공부는 의미 있는 투자라는 생각이 드네요!

# Unit 1: 좋은 알고리즘이란?
# Chapter 1: 알고리즘이란?
# Chapter 2: 하나의 문제, 여러 가지 알고리즘
# Chapter 3: 알고리즘 평가법

# Unit 2: 재귀 함수
# Chapter 4: 재귀 함수
# Chapter 5: 재귀 함수 연습

# Unit 3: 알고리즘 패러다임
# Chapter 6: Brute Force
# Chapter 7: Divide and Conquer
# Chapter 8: Dynamic Programming
# Chapter 9: Greedy Algorithm

# Unit 4: 문제 해결 능력 기르기
# Chapter 10: 알고리즘 연습 Level 1
# Chapter 11: 알고리즘 연습 Level 2
# Chapter 12: 알고리즘 연습 Level 3

# 하지만 이 수업의 핵심은 정보 습득이 아니라, 알고리즘적 사고력을 최대한 기르는 것입니다. 문제 하나하나를 소중하게 생각하고, 가능한 많은 시간을 들여 어떻게든 풀 수 있도록 해야 합니다. 아무리 고민해도 갈피를 못 잡겠으면 힌트 하나를 열고 다시 생각해 보세요. 또 오랜 시간을 들여 고민하다가 모르겠으면 힌트 하나를 더 열어 보세요. 커뮤니티에 질문을 해도 좋고요.
